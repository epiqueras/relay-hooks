{"version":3,"file":"cjs-relay-hooks.js","sources":["../src/ReactRelayContext.ts","../node_modules/tslib/tslib.es6.js","../src/RelayHooksType.ts","../src/Utils.ts","../src/QueryFetcher.ts","../src/useQueryFetcher.ts","../src/useRelayEnvironment.ts","../src/useQuery.ts","../src/useLazyLoadQuery.ts","../src/loadQuery.ts","../src/usePreloadedQuery.ts","../src/FragmentResolver.ts","../src/useOssFragment.tsx","../src/useFragment.tsx","../src/useMutation.ts","../src/useSubscription.ts","../src/usePagination.ts","../src/useRefetch.ts","../src/useRefetchable.ts","../src/RelayEnvironmentProvider.tsx"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport { __internal } from 'relay-runtime';\n\nconst { createRelayContext } = __internal as any;\n\nexport const ReactRelayContext = createRelayContext(React);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    Disposable,\n    OperationType,\n    CacheConfig,\n    GraphQLTaggedNode,\n    Environment,\n    IEnvironment,\n    Variables,\n    PageInfo,\n    Observer,\n    MutationConfig as BaseMutationConfig,\n    MutationParameters,\n} from 'relay-runtime';\nimport {\n    RelayContext,\n    FragmentSpecResolver,\n    Snapshot,\n} from 'relay-runtime/lib/store/RelayStoreTypes';\n\nexport type MutationState<T extends MutationParameters> = {\n    loading: boolean;\n    data: T['response'] | null;\n    error?: Error | null;\n};\n\nexport type MutationNode<T extends MutationParameters> = BaseMutationConfig<T>['mutation'];\n\nexport type MutationConfig<T extends MutationParameters> = Partial<\n    Omit<BaseMutationConfig<T>, 'mutation' | 'onCompleted'>\n> & {\n    onCompleted?(response: T['response']): void;\n};\n\nexport type Mutate<T extends MutationParameters> = (\n    config?: Partial<MutationConfig<T>>,\n) => Promise<T['response']>;\n\nexport type MutationProps<T extends MutationParameters> = MutationConfig<T> & {\n    children: (mutate: Mutate<T>, state: MutationState<T>) => React.ReactNode;\n    mutation: MutationNode<T>;\n    /** if not provided, the context environment will be used. */\n    environment?: Environment;\n};\n\nexport const NETWORK_ONLY = 'network-only';\nexport const STORE_THEN_NETWORK = 'store-and-network';\nexport const STORE_OR_NETWORK = 'store-or-network';\nexport const STORE_ONLY = 'store-only';\n\nexport type FetchPolicy =\n    | typeof STORE_ONLY\n    | typeof STORE_OR_NETWORK\n    | typeof STORE_THEN_NETWORK\n    | typeof NETWORK_ONLY;\n\nexport type ContainerResult = {\n    data: { [key: string]: any };\n    resolver: FragmentSpecResolver;\n};\n\nexport interface RenderProps<T extends OperationType> {\n    error: Error | null;\n    props: T['response'] | null | undefined;\n    retry: (_cacheConfigOverride?: CacheConfig, observer?: Observer<Snapshot>) => void;\n    cached?: boolean;\n}\n\nexport type OperationContextProps = {\n    operation: any;\n    relay: RelayContext;\n};\n\nexport type RefetchOptions = {\n    force?: boolean;\n    fetchPolicy?: FetchPolicy;\n    metadata?: { [key: string]: any };\n};\n\nexport type QueryOptions = {\n    fetchPolicy?: FetchPolicy;\n    fetchKey?: string | number;\n    networkCacheConfig?: CacheConfig;\n    skip?: boolean;\n    fetchObserver?: Observer<Snapshot>;\n};\n\nexport type $Call<Fn extends (...args: any[]) => any> = Fn extends (arg: any) => infer RT\n    ? RT\n    : never;\n\nexport interface KeyType {\n    readonly ' $data'?: unknown;\n}\nexport type ArrayKeyType = ReadonlyArray<{ readonly ' $data'?: ReadonlyArray<unknown> } | null>;\n\nexport type KeyReturnType<T extends KeyType> = (arg: T) => NonNullable<T[' $data']>;\nexport type ArrayKeyReturnType<T extends ArrayKeyType> = (\n    arg: T,\n) => NonNullable<NonNullable<T[0]>[' $data']>[0];\n\nexport type PaginationFunction<Props, TVariables extends Variables = Variables> = {\n    loadMore: (\n        connectionConfig: ConnectionConfig<Props>,\n        pageSize: number,\n        observerOrCallback?: ObserverOrCallback,\n        options?: RefetchOptions,\n    ) => Disposable;\n    hasMore: (connectionConfig?: ConnectionConfig<Props>) => boolean;\n    isLoading: () => boolean;\n    refetchConnection: (\n        connectionConfig: ConnectionConfig<Props>,\n        totalCount: number,\n        observerOrCallback?: ObserverOrCallback,\n        refetchVariables?: TVariables,\n    ) => Disposable;\n};\n\nexport type RefetchableFunction<TVariables extends Variables = Variables> = (\n    refetchVariables: TVariables | ((fragmentVariables: TVariables) => TVariables),\n    options?: {\n        renderVariables?: TVariables;\n        observerOrCallback?: ObserverOrCallback;\n        refetchOptions?: RefetchOptions;\n    },\n) => Disposable;\n\nexport type RefetchFunction<TVariables extends Variables = Variables> = (\n    taggedNode: GraphQLTaggedNode,\n    refetchVariables: TVariables | ((fragmentVariables: TVariables) => TVariables),\n    renderVariables?: TVariables,\n    observerOrCallback?: ObserverOrCallback,\n    options?: RefetchOptions,\n) => Disposable;\n\nexport type ObserverOrCallback = Observer<void> | ((error?: Error | null | undefined) => void);\n\n// pagination\n\nexport const FORWARD = 'forward';\n\nexport type FragmentVariablesGetter = (prevVars: Variables, totalCount: number) => Variables;\n\nexport interface ConnectionConfig<Props = object> {\n    direction?: 'backward' | 'forward';\n    getConnectionFromProps?: (props: Props) => ConnectionData | null | undefined;\n    getFragmentVariables?: (prevVars: Variables, totalCount: number) => Variables;\n    getVariables: (\n        props: Props,\n        paginationInfo: { count: number; cursor?: string | null },\n        fragmentVariables: Variables,\n    ) => Variables;\n    query: GraphQLTaggedNode;\n}\nexport interface ConnectionData {\n    edges?: ReadonlyArray<any> | null;\n    pageInfo?: Partial<PageInfo> | null;\n}\n\nexport type PaginationData = {\n    direction: string;\n    getConnectionFromProps: Function;\n    getFragmentVariables: Function;\n};\n\nexport type LoadQuery<\n    TOperationType extends OperationType = OperationType,\n    TEnvironment extends IEnvironment = IEnvironment\n> = {\n    next: (\n        environment: TEnvironment,\n        gqlQuery: GraphQLTaggedNode,\n        variables?: TOperationType['variables'],\n        options?: QueryOptions,\n    ) => Promise<void>;\n    subscribe: (callback: (value: any) => any) => () => void;\n    getValue: (environment?: TEnvironment) => RenderProps<TOperationType> | Promise<any>;\n    dispose: () => void;\n};\n","import * as areEqual from 'fbjs/lib/areEqual';\nimport * as invariant from 'fbjs/lib/invariant';\nimport * as warning from 'fbjs/lib/warning';\nimport {\n    Observer,\n    Variables,\n    ConnectionMetadata,\n    ConnectionInterface,\n    createRequestDescriptor,\n    createReaderSelector,\n    createOperationDescriptor,\n    getRequest,\n    GraphQLTaggedNode,\n    OperationDescriptor,\n    SingularReaderSelector,\n} from 'relay-runtime';\nimport {\n    STORE_OR_NETWORK,\n    STORE_THEN_NETWORK,\n    NETWORK_ONLY,\n    FetchPolicy,\n    FragmentVariablesGetter,\n    FORWARD,\n    PaginationData,\n    ConnectionConfig,\n    ObserverOrCallback,\n} from './RelayHooksType';\n\nexport type ReactConnectionMetadata = ConnectionMetadata & { fragmentName: string };\n\nexport const isNetworkPolicy = (policy: FetchPolicy, storeSnapshot): boolean => {\n    return (\n        policy === NETWORK_ONLY ||\n        policy === STORE_THEN_NETWORK ||\n        (policy === STORE_OR_NETWORK && !storeSnapshot)\n    );\n};\n\nexport const isStorePolicy = (policy: FetchPolicy): boolean => {\n    return policy !== NETWORK_ONLY;\n};\n\n// Fetcher\nexport function createOperation(\n    gqlQuery: GraphQLTaggedNode,\n    variables: Variables,\n): OperationDescriptor {\n    return createOperationDescriptor(getRequest(gqlQuery), variables);\n}\n\n// pagination utils\n\nexport function findConnectionMetadata(fragment): ReactConnectionMetadata {\n    let foundConnectionMetadata = null;\n    let isRelayModern = false;\n    // for (const fragmentName in fragments) {\n    //   const fragment = fragments[fragmentName];\n    const connectionMetadata: Array<ConnectionMetadata> =\n        fragment.metadata && (fragment.metadata.connection as any);\n    // HACK: metadata is always set to `undefined` in classic. In modern, even\n    // if empty, it is set to null (never undefined). We use that knowlege to\n    // check if we're dealing with classic or modern\n    if (fragment.metadata !== undefined) {\n        isRelayModern = true;\n    }\n    if (connectionMetadata) {\n        invariant(\n            connectionMetadata.length === 1,\n            'ReactRelayPaginationContainer: Only a single @connection is ' +\n                'supported, `%s` has %s.',\n            fragment.name,\n            connectionMetadata.length,\n        );\n        invariant(\n            !foundConnectionMetadata,\n            'ReactRelayPaginationContainer: Only a single fragment with ' +\n                '@connection is supported.',\n        );\n        foundConnectionMetadata = {\n            ...connectionMetadata[0],\n            fragmentName: fragment.name,\n        };\n    }\n    //}\n    invariant(\n        !isRelayModern || foundConnectionMetadata !== null,\n        'ReactRelayPaginationContainer: A @connection directive must be present.',\n    );\n    return foundConnectionMetadata || ({} as any);\n}\n\nexport function createGetConnectionFromProps(metadata: ReactConnectionMetadata): any {\n    const path = metadata.path;\n    invariant(\n        path,\n        'ReactRelayPaginationContainer: Unable to synthesize a ' +\n            'getConnectionFromProps function.',\n    );\n    return (props): any => {\n        let data = props;\n        for (let i = 0; i < path.length; i++) {\n            if (!data || typeof data !== 'object') {\n                return null;\n            }\n            data = data[path[i]];\n        }\n        return data;\n    };\n}\n\nexport function createGetFragmentVariables(\n    metadata: ReactConnectionMetadata,\n): FragmentVariablesGetter {\n    const countVariable = metadata.count;\n    invariant(\n        countVariable,\n        'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getFragmentVariables function.',\n    );\n    return (prevVars: Variables, totalCount: number): Variables => ({\n        ...prevVars,\n        [countVariable]: totalCount,\n    });\n}\n\n/*eslint-disable */\nexport function toObserver(observerOrCallback: ObserverOrCallback): Observer<void> {\n    return typeof observerOrCallback === 'function'\n        ? {\n              error: observerOrCallback,\n              complete: observerOrCallback,\n              unsubscribe: (subscription): void => {\n                  typeof observerOrCallback === 'function' && observerOrCallback();\n              },\n          }\n        : observerOrCallback || ({} as any);\n}\n/*eslint-enable */\nexport function getPaginationData(paginationData, fragment): PaginationData {\n    if (!paginationData) {\n        const metadata = findConnectionMetadata(fragment);\n        const getConnectionFromProps = createGetConnectionFromProps(metadata);\n        const direction = metadata.direction;\n        invariant(\n            direction,\n            'ReactRelayPaginationContainer: Unable to infer direction of the ' +\n                'connection, possibly because both first and last are provided.',\n        );\n\n        const getFragmentVariables = createGetFragmentVariables(metadata);\n\n        return {\n            direction,\n            getConnectionFromProps,\n            getFragmentVariables,\n        };\n    }\n    return paginationData;\n}\n\nexport function getNewSelector(request, s, variables): SingularReaderSelector {\n    if (areEqual(variables, s.variables)) {\n        // If we're not actually setting new variables, we don't actually want\n        // to create a new fragment owner, since areEqualSelectors relies on\n        // owner identity.\n        // In fact, we don't even need to try to attempt to set a new selector.\n        // When fragment ownership is not enabled, setSelector will also bail\n        // out since the selector doesn't really change, so we're doing it here\n        // earlier.\n        return s;\n    }\n    // NOTE: We manually create the request descriptor here instead of\n    // calling createOperationDescriptor() because we want to set a\n    // descriptor with *unaltered* variables as the fragment owner.\n    // This is a hack that allows us to preserve exisiting (broken)\n    // behavior of RelayModern containers while using fragment ownership\n    // to propagate variables instead of Context.\n    // For more details, see the summary of D13999308\n    const requestDescriptor = createRequestDescriptor(request, variables);\n    const selector = createReaderSelector(s.node, s.dataID, variables, requestDescriptor);\n    return selector;\n}\n\nexport function _getConnectionData(\n    { direction, getConnectionFromProps: defaultGetConnectionFromProps }: PaginationData,\n    props: any,\n    connectionConfig?: ConnectionConfig,\n): {\n    cursor: string;\n    edgeCount: number;\n    hasMore: boolean;\n} {\n    // Extract connection data and verify there are more edges to fetch\n    const getConnectionFromProps =\n        connectionConfig && connectionConfig.getConnectionFromProps\n            ? connectionConfig.getConnectionFromProps\n            : defaultGetConnectionFromProps; // todo\n    const connectionData = getConnectionFromProps(props);\n    if (connectionData == null) {\n        return null;\n    }\n    const {\n        EDGES,\n        PAGE_INFO,\n        HAS_NEXT_PAGE,\n        HAS_PREV_PAGE,\n        END_CURSOR,\n        START_CURSOR,\n    } = ConnectionInterface.get();\n\n    invariant(\n        typeof connectionData === 'object',\n        'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' +\n            'to return `null` or a plain object with %s and %s properties, got `%s`.',\n        'useFragment pagination',\n        EDGES,\n        PAGE_INFO,\n        connectionData,\n    );\n    const edges = connectionData[EDGES];\n    const pageInfo = connectionData[PAGE_INFO];\n    if (edges == null || pageInfo == null) {\n        return null;\n    }\n    invariant(\n        Array.isArray(edges),\n        'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' +\n            'to return an object with %s: Array, got `%s`.',\n        'useFragment pagination',\n        EDGES,\n        edges,\n    );\n    invariant(\n        typeof pageInfo === 'object',\n        'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' +\n            'to return an object with %s: Object, got `%s`.',\n        'useFragment pagination',\n        PAGE_INFO,\n        pageInfo,\n    );\n    const hasMore = direction === FORWARD ? pageInfo[HAS_NEXT_PAGE] : pageInfo[HAS_PREV_PAGE];\n    const cursor = direction === FORWARD ? pageInfo[END_CURSOR] : pageInfo[START_CURSOR];\n    if (typeof hasMore !== 'boolean' || (edges.length !== 0 && typeof cursor === 'undefined')) {\n        warning(\n            false,\n            'ReactRelayPaginationContainer: Cannot paginate without %s fields in `%s`. ' +\n                'Be sure to fetch %s (got `%s`) and %s (got `%s`).',\n            PAGE_INFO,\n            'useFragment pagination',\n            direction === FORWARD ? HAS_NEXT_PAGE : HAS_PREV_PAGE,\n            hasMore,\n            direction === FORWARD ? END_CURSOR : START_CURSOR,\n            cursor,\n        );\n        return null;\n    }\n    return {\n        cursor,\n        edgeCount: edges.length,\n        hasMore,\n    };\n}\n\n/*eslint-disable */\nexport function getRootVariablesForSelector(selector): Variables {\n    return selector != null && selector.kind === 'PluralReaderSelector'\n        ? selector.selectors[0]\n            ? selector.selectors[0].owner.variables\n            : {}\n        : selector\n        ? selector.owner.variables\n        : {};\n}\n","import {\n    Disposable,\n    CacheConfig,\n    IEnvironment,\n    Snapshot,\n    __internal,\n    OperationType,\n    OperationDescriptor,\n    Observer,\n} from 'relay-runtime';\nimport { FetchPolicy, RenderProps, QueryOptions } from './RelayHooksType';\nimport { isNetworkPolicy, isStorePolicy } from './Utils';\n\nconst { fetchQuery } = __internal;\n\nconst defaultPolicy = 'store-or-network';\n\nconst cache: Map<string, QueryFetcher<any>> = new Map();\n\nexport function getOrCreateQueryFetcher<TOperationType extends OperationType>(\n    query: OperationDescriptor | null,\n    forceUpdate: any,\n): QueryFetcher<TOperationType> {\n    const suspense = !!query;\n    const queryFetcher =\n        suspense && cache.has(query.request.identifier)\n            ? cache.get(query.request.identifier)\n            : new QueryFetcher(suspense, suspense);\n    queryFetcher.setForceUpdate(forceUpdate);\n    return queryFetcher;\n}\n\nconst DATA_RETENTION_TIMEOUT = 30 * 1000;\n\nexport class QueryFetcher<TOperationType extends OperationType = OperationType> {\n    environment: IEnvironment;\n    query: OperationDescriptor;\n    networkSubscription: Disposable;\n    rootSubscription: Disposable;\n    error: Error | null;\n    snapshot: Snapshot;\n    fetchPolicy: FetchPolicy;\n    fetchKey: string | number;\n    disposableRetain: Disposable;\n    forceUpdate: (_o: any) => void;\n    suspense: boolean;\n    useLazy: boolean;\n    releaseQueryTimeout;\n\n    constructor(suspense = false, useLazy = false) {\n        this.suspense = suspense;\n        this.useLazy = suspense && useLazy;\n        this.setForceUpdate(() => undefined);\n    }\n\n    setForceUpdate(forceUpdate): void {\n        this.forceUpdate = forceUpdate;\n    }\n\n    dispose(): void {\n        this.disposeRequest();\n        this.disposeRetain();\n    }\n\n    disposeRetain(): void {\n        this.clearTemporaryRetain();\n        this.disposableRetain && this.disposableRetain.dispose();\n        this.query && cache.delete(this.query.request.identifier);\n    }\n\n    clearTemporaryRetain(): void {\n        clearTimeout(this.releaseQueryTimeout);\n        this.releaseQueryTimeout = null;\n    }\n\n    temporaryRetain(): void {\n        const localReleaseTemporaryRetain = (): void => {\n            this.dispose();\n        };\n        this.releaseQueryTimeout = setTimeout(localReleaseTemporaryRetain, DATA_RETENTION_TIMEOUT);\n    }\n\n    isDiffEnvQuery(environment: IEnvironment, query): boolean {\n        return (\n            environment !== this.environment ||\n            query.request.identifier !== this.query.request.identifier\n        );\n    }\n\n    lookupInStore(environment: IEnvironment, operation, fetchPolicy: FetchPolicy): Snapshot {\n        if (isStorePolicy(fetchPolicy)) {\n            const check: any = environment.check(operation);\n            if (check === 'available' || check.status === 'available') {\n                return environment.lookup(operation.fragment);\n            }\n        }\n        return null;\n    }\n\n    execute(\n        environment: IEnvironment,\n        query: OperationDescriptor,\n        options: QueryOptions,\n        retain: (environment, query) => Disposable = (environment, query): Disposable =>\n            environment.retain(query),\n    ): RenderProps<TOperationType> {\n        const {\n            fetchPolicy = defaultPolicy,\n            networkCacheConfig,\n            fetchKey,\n            skip,\n            fetchObserver,\n        } = options;\n        let storeSnapshot;\n        const retry = (\n            cacheConfigOverride: CacheConfig = networkCacheConfig,\n            observer?: Observer<Snapshot>,\n        ): void => {\n            this.disposeRequest();\n            this.fetch(cacheConfigOverride, false, observer);\n        };\n        if (skip) {\n            return {\n                cached: false,\n                retry,\n                error: null,\n                props: undefined,\n            };\n        }\n        this.clearTemporaryRetain();\n        const isDiffEnvQuery = this.isDiffEnvQuery(environment, query);\n        if (isDiffEnvQuery || fetchPolicy !== this.fetchPolicy || fetchKey !== this.fetchKey) {\n            if (isDiffEnvQuery) {\n                this.disposeRetain();\n                this.useLazy && cache.set(query.request.identifier, this);\n                this.disposableRetain = retain(environment, query);\n            }\n            this.environment = environment;\n            this.query = query;\n            this.fetchPolicy = fetchPolicy;\n            this.fetchKey = fetchKey;\n            this.disposeRequest();\n\n            storeSnapshot = this.lookupInStore(environment, this.query, fetchPolicy);\n            const isNetwork = isNetworkPolicy(fetchPolicy, storeSnapshot);\n            if (isNetwork) {\n                this.fetch(networkCacheConfig, this.suspense && !storeSnapshot, fetchObserver);\n            } else if (!!storeSnapshot) {\n                this.snapshot = storeSnapshot;\n                this.error = null;\n                this.subscribe(storeSnapshot);\n            }\n        }\n\n        const resultSnapshot = storeSnapshot || this.snapshot;\n        return {\n            cached: !!storeSnapshot,\n            retry,\n            error: this.error,\n            props: resultSnapshot ? resultSnapshot.data : null,\n        };\n    }\n\n    subscribe(snapshot): void {\n        if (this.rootSubscription) {\n            this.rootSubscription.dispose();\n        }\n        this.rootSubscription = this.environment.subscribe(snapshot, (snapshot) => {\n            // Read from this._fetchOptions in case onDataChange() was lazily added.\n            this.snapshot = snapshot;\n            this.error = null;\n            this.forceUpdate(snapshot);\n        });\n    }\n\n    fetch(networkCacheConfig, suspense: boolean, observer = {} as Observer<Snapshot>): void {\n        let fetchHasReturned = false;\n        let resolveNetworkPromise = (): void => {};\n        fetchQuery(this.environment, this.query, {\n            networkCacheConfig:\n                suspense && !networkCacheConfig ? { force: true } : networkCacheConfig,\n        }).subscribe({\n            start: (subscription) => {\n                this.networkSubscription = {\n                    dispose: (): void => subscription.unsubscribe(),\n                };\n                observer.start && observer.start(subscription);\n            },\n            next: () => {\n                this.error = null;\n                this._onQueryDataAvailable({\n                    notifyFirstResult: fetchHasReturned,\n                    suspense,\n                    observer,\n                });\n                resolveNetworkPromise();\n            },\n            error: (error) => {\n                this.error = error;\n                this.snapshot = null;\n                if (fetchHasReturned && !suspense) {\n                    this.forceUpdate(error);\n                }\n                resolveNetworkPromise();\n                this.networkSubscription = null;\n                observer.error && observer.error(error);\n            },\n            complete: () => {\n                this.networkSubscription = null;\n                observer.complete && observer.complete();\n            },\n            unsubscribe: (subscription) => {\n                if (this.useLazy && !this.rootSubscription && this.releaseQueryTimeout) {\n                    this.dispose();\n                }\n                observer.unsubscribe && observer.unsubscribe(subscription);\n            },\n        });\n        fetchHasReturned = true;\n        if (suspense) {\n            if (this.useLazy) {\n                this.setForceUpdate(() => undefined);\n                this.temporaryRetain();\n            }\n            throw new Promise((resolve) => {\n                resolveNetworkPromise = resolve;\n            });\n        }\n    }\n\n    disposeRequest(): void {\n        this.error = null;\n        this.snapshot = null;\n        if (this.networkSubscription) {\n            this.networkSubscription.dispose();\n            this.networkSubscription = null;\n        }\n        if (this.rootSubscription) {\n            this.rootSubscription.dispose();\n            this.rootSubscription = null;\n        }\n    }\n\n    _onQueryDataAvailable({\n        notifyFirstResult,\n        suspense,\n        observer,\n    }: {\n        notifyFirstResult: boolean;\n        suspense: boolean;\n        observer: Observer<Snapshot>;\n    }): void {\n        // `_onQueryDataAvailable` can be called synchronously the first time and can be called\n        // multiple times by network layers that support data subscriptions.\n        // Wait until the first payload to call `onDataChange` and subscribe for data updates.\n\n        if (this.snapshot) {\n            return;\n        }\n\n        this.snapshot = this.environment.lookup(this.query.fragment);\n\n        // Subscribe to changes in the data of the root fragment\n        this.subscribe(this.snapshot);\n\n        observer.next && observer.next(this.snapshot);\n\n        if (this.snapshot && notifyFirstResult && !suspense) {\n            this.forceUpdate(this.snapshot);\n        }\n    }\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { OperationType, OperationDescriptor } from 'relay-runtime';\nimport { QueryFetcher, getOrCreateQueryFetcher } from './QueryFetcher';\n\nexport type Reference<TOperationType extends OperationType = OperationType> = {\n    queryFetcher: QueryFetcher<TOperationType>;\n};\n\n// set query when you want suspends\nexport const useQueryFetcher = <TOperationType extends OperationType>(\n    query?: OperationDescriptor,\n): QueryFetcher<TOperationType> => {\n    const [, forceUpdate] = useState(null);\n    const ref = useRef<Reference<TOperationType>>();\n    if (ref.current === null || ref.current === undefined) {\n        ref.current = {\n            queryFetcher: getOrCreateQueryFetcher(query, forceUpdate),\n        };\n    }\n    //const { queryFetcher } = ref.current;\n\n    useEffect(() => {\n        return (): void => ref.current.queryFetcher.dispose();\n    }, []);\n    return ref.current.queryFetcher;\n};\n","import * as React from 'react';\nimport { IEnvironment } from 'relay-runtime';\nimport { ReactRelayContext } from './ReactRelayContext';\n\nexport function useRelayEnvironment<\n    TEnvironment extends IEnvironment = IEnvironment\n>(): TEnvironment {\n    const { environment } = React.useContext(ReactRelayContext);\n    return environment;\n}\n","import * as areEqual from 'fbjs/lib/areEqual';\nimport { useRef, useMemo } from 'react';\nimport { GraphQLTaggedNode, OperationType, OperationDescriptor, Variables } from 'relay-runtime';\nimport { RenderProps, QueryOptions } from './RelayHooksType';\nimport { useQueryFetcher } from './useQueryFetcher';\nimport { useRelayEnvironment } from './useRelayEnvironment';\nimport { createOperation } from './Utils';\n\nexport function useDeepCompare<T>(value: T): T {\n    const latestValue = useRef(value);\n    if (!areEqual(latestValue.current, value)) {\n        latestValue.current = value;\n    }\n    return latestValue.current;\n}\n\nexport function useMemoOperationDescriptor(\n    gqlQuery: GraphQLTaggedNode,\n    variables: Variables,\n): OperationDescriptor {\n    const memoVariables = useDeepCompare(variables);\n    return useMemo(() => createOperation(gqlQuery, memoVariables), [gqlQuery, memoVariables]);\n}\n\nexport const useQuery = <TOperationType extends OperationType = OperationType>(\n    gqlQuery: GraphQLTaggedNode,\n    variables: TOperationType['variables'] = {},\n    options: QueryOptions = {},\n): RenderProps<TOperationType> => {\n    const environment = useRelayEnvironment();\n    const query = useMemoOperationDescriptor(gqlQuery, variables);\n    const queryFetcher = useQueryFetcher<TOperationType>();\n\n    return queryFetcher.execute(environment, query, options);\n};\n","import { GraphQLTaggedNode, OperationType } from 'relay-runtime';\nimport { RenderProps, QueryOptions } from './RelayHooksType';\nimport { useMemoOperationDescriptor } from './useQuery';\nimport { useQueryFetcher } from './useQueryFetcher';\nimport { useRelayEnvironment } from './useRelayEnvironment';\n\nexport const useLazyLoadQuery = <TOperationType extends OperationType = OperationType>(\n    gqlQuery: GraphQLTaggedNode,\n    variables: TOperationType['variables'] = {},\n    options: QueryOptions = {},\n): RenderProps<TOperationType> => {\n    const environment = useRelayEnvironment();\n    const query = useMemoOperationDescriptor(gqlQuery, variables);\n    const queryFetcher = useQueryFetcher<TOperationType>(query);\n    return queryFetcher.execute(environment, query, options);\n};\n","import * as areEqual from 'fbjs/lib/areEqual';\nimport {\n    GraphQLTaggedNode,\n    OperationType,\n    IEnvironment,\n    isPromise,\n    OperationDescriptor,\n    Disposable,\n} from 'relay-runtime';\nimport { QueryFetcher } from './QueryFetcher';\nimport { RenderProps, QueryOptions, LoadQuery } from './RelayHooksType';\nimport { createOperation } from './Utils';\n\nexport const internalLoadQuery = <TOperationType extends OperationType = OperationType>(\n    promise = false,\n    queryExecute = (\n        queryFetcher: QueryFetcher<TOperationType>,\n        environment: IEnvironment,\n        query: OperationDescriptor,\n        options: QueryOptions,\n        retain?: (environment, query) => Disposable,\n    ): RenderProps<TOperationType> => queryFetcher.execute(environment, query, options, retain),\n): LoadQuery<TOperationType> => {\n    let data: RenderProps<TOperationType> | null | Promise<any> = null;\n    let listener = undefined;\n    let queryFetcher = new QueryFetcher<TOperationType>(true);\n\n    let prev = {\n        environment: null,\n        gqlQuery: null,\n        variables: null,\n        options: null,\n        query: null,\n    };\n\n    const dispose = (): void => {\n        queryFetcher.dispose();\n        queryFetcher = new QueryFetcher<TOperationType>(true);\n        listener = undefined;\n        data = null;\n        prev = {\n            environment: null,\n            gqlQuery: null,\n            variables: null,\n            options: null,\n            query: null,\n        };\n    };\n\n    const next = (\n        environment,\n        gqlQuery: GraphQLTaggedNode,\n        variables: TOperationType['variables'] = {},\n        options: QueryOptions = {},\n    ): Promise<void> => {\n        prev.environment = environment;\n        prev.options = options;\n        if (!areEqual(variables, prev.variables) || gqlQuery != prev.gqlQuery) {\n            prev.variables = variables;\n            prev.gqlQuery = gqlQuery;\n            prev.query = createOperation(gqlQuery, prev.variables);\n        }\n        const execute = (): void => {\n            data = queryExecute(queryFetcher, prev.environment, prev.query, prev.options);\n            listener && listener(data);\n        };\n\n        queryFetcher.setForceUpdate(execute);\n        let result;\n        try {\n            execute();\n        } catch (e) {\n            result = e.then(execute);\n            if (promise) {\n                data = result;\n            } else {\n                execute();\n            }\n        }\n        return result ?? Promise.resolve();\n    };\n\n    const getValue = (\n        environment?: IEnvironment,\n    ): RenderProps<TOperationType> | null | Promise<any> => {\n        if (environment && environment != prev.environment) {\n            next(environment, prev.gqlQuery, prev.variables, prev.options);\n        }\n        if (isPromise(data)) {\n            throw data;\n        }\n\n        return data;\n    };\n\n    const subscribe = (callback: (value) => any): (() => void) => {\n        listener = callback;\n        return (): void => {\n            if (listener === callback) {\n                listener = null;\n            }\n        };\n    };\n    return {\n        next,\n        subscribe,\n        getValue,\n        dispose,\n    };\n};\n\nexport const loadLazyQuery = <\n    TOperationType extends OperationType = OperationType\n>(): LoadQuery<TOperationType> => {\n    return internalLoadQuery(true);\n};\n\nexport const loadQuery = <\n    TOperationType extends OperationType = OperationType\n>(): LoadQuery<TOperationType> => {\n    return internalLoadQuery(false);\n};\n","import { useState, useEffect } from 'react';\nimport { OperationType } from 'relay-runtime';\nimport { RenderProps, LoadQuery } from './RelayHooksType';\nimport { useRelayEnvironment } from './useRelayEnvironment';\n\nexport const usePreloadedQuery = <TOperationType extends OperationType = OperationType>(\n    loadQuery: LoadQuery,\n): RenderProps<TOperationType> => {\n    const [, forceUpdate] = useState();\n    const environment = useRelayEnvironment();\n\n    useEffect(() => {\n        const dispose = loadQuery.subscribe(forceUpdate);\n        return (): void => dispose();\n    }, [loadQuery]);\n\n    return loadQuery.getValue(environment) as RenderProps<TOperationType>;\n};\n","import * as areEqual from 'fbjs/lib/areEqual';\nimport * as invariant from 'fbjs/lib/invariant';\nimport {\n    getSelector,\n    IEnvironment,\n    Disposable,\n    Snapshot,\n    getFragment,\n    Variables,\n    getVariablesFromFragment,\n    GraphQLTaggedNode,\n    Observable,\n    Observer,\n    OperationDescriptor,\n    CacheConfig,\n    Subscription,\n    getDataIDsFromFragment,\n    PluralReaderSelector,\n    __internal,\n    ReaderSelector,\n} from 'relay-runtime';\nimport {\n    RefetchOptions,\n    PaginationData,\n    ConnectionConfig,\n    ObserverOrCallback,\n} from './RelayHooksType';\nimport {\n    isNetworkPolicy,\n    isStorePolicy,\n    getPaginationData,\n    _getConnectionData,\n    toObserver,\n    getRootVariablesForSelector,\n    getNewSelector,\n    createOperation,\n} from './Utils';\n\nconst { fetchQuery } = __internal;\n\ntype SingularOrPluralSnapshot = Snapshot | Array<Snapshot>;\n\nfunction lookupFragment(environment, selector): SingularOrPluralSnapshot {\n    return selector.kind === 'PluralReaderSelector'\n        ? selector.selectors.map((s) => environment.lookup(s))\n        : environment.lookup(selector);\n}\n\nfunction getFragmentResult(snapshot: SingularOrPluralSnapshot): any {\n    if (Array.isArray(snapshot)) {\n        return { snapshot, data: snapshot.map((s) => s.data) };\n    }\n    return { snapshot, data: snapshot.data };\n}\n\ntype FragmentResult = {\n    snapshot: SingularOrPluralSnapshot | null;\n    data: any;\n};\n\nexport class FragmentResolver {\n    _environment: IEnvironment;\n    _fragment: any;\n    _fragmentNode: any;\n    _fragmentRef: any;\n    _result: FragmentResult;\n    _disposable: Disposable = { dispose: () => {} };\n    _selector: ReaderSelector;\n    _forceUpdate: any;\n    _isPlural: boolean;\n    _refetchSubscription: Subscription;\n    paginationData: PaginationData;\n    _refetchVariables: Variables;\n    _isARequestInFlight = false;\n    _selectionReferences: Array<Disposable> = [];\n    _cacheSelectionReference: Disposable;\n    indexUpdate = 0;\n\n    constructor(forceUpdate) {\n        this._forceUpdate = forceUpdate;\n    }\n\n    refreshHooks(): void {\n        this.indexUpdate += 1;\n        this._forceUpdate(this.indexUpdate);\n    }\n\n    dispose(): void {\n        this._disposable && this._disposable.dispose();\n        this._refetchSubscription && this._refetchSubscription.unsubscribe();\n        this._refetchSubscription = null;\n        this.disposeSelectionReferences();\n\n        this._isARequestInFlight = false;\n    }\n\n    disposeSelectionReferences(): void {\n        this._disposeCacheSelectionReference();\n        this._selectionReferences.forEach((r) => r.dispose());\n        this._selectionReferences = [];\n    }\n\n    _retainCachedOperation(operation: OperationDescriptor): void {\n        this._disposeCacheSelectionReference();\n        this._cacheSelectionReference = this._environment.retain(operation);\n    }\n\n    _disposeCacheSelectionReference(): void {\n        this._cacheSelectionReference && this._cacheSelectionReference.dispose();\n        this._cacheSelectionReference = null;\n    }\n\n    getFragmentVariables(fRef = this._fragmentRef): Variables {\n        return getVariablesFromFragment(this._fragment, fRef);\n    }\n\n    changedFragmentRef(fragmentRef): boolean {\n        if (this._fragmentRef !== fragmentRef) {\n            const prevIDs = getDataIDsFromFragment(this._fragment, this._fragmentRef);\n            const nextIDs = getDataIDsFromFragment(this._fragment, fragmentRef);\n\n            if (\n                !areEqual(prevIDs, nextIDs) ||\n                !areEqual(\n                    this.getFragmentVariables(fragmentRef),\n                    this.getFragmentVariables(this._fragmentRef),\n                )\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    resolve(environment: IEnvironment, fragmentNode, fragmentRef): void {\n        if (this._fragmentNode !== fragmentNode) {\n            this._fragment = getFragment(fragmentNode);\n            this.paginationData = null;\n        }\n        if (\n            this._environment !== environment ||\n            this._fragmentNode !== fragmentNode ||\n            this.changedFragmentRef(fragmentRef)\n        ) {\n            this._environment = environment;\n            this._fragmentNode = fragmentNode;\n            this._fragmentRef = fragmentRef;\n            this._result = null;\n            this.dispose();\n            if (this._fragmentRef == null) {\n                this._result = { data: null, snapshot: null };\n            }\n\n            // If fragmentRef is plural, ensure that it is an array.\n            // If it's empty, return the empty array direclty before doing any more work.\n            this._isPlural =\n                this._fragment.metadata &&\n                this._fragment.metadata.plural &&\n                this._fragment.metadata.plural === true;\n            if (this._isPlural) {\n                if (this._fragmentRef.length === 0) {\n                    this._result = { data: [], snapshot: [] };\n                }\n            }\n\n            if (!this._result) {\n                this._selector = getSelector(this._fragment, this._fragmentRef);\n                this.lookup();\n            }\n        }\n    }\n\n    lookup(): void {\n        const snapshot = lookupFragment(this._environment, this._selector);\n\n        // if (!isMissingData(snapshot)) { this for promises\n        this._result = getFragmentResult(snapshot);\n        this.subscribe();\n    }\n\n    getData(): any | null {\n        return this._result ? this._result.data : null;\n    }\n\n    subscribe(): void {\n        const environment = this._environment;\n        const renderedSnapshot = this._result.snapshot;\n\n        this._disposable && this._disposable.dispose();\n        if (!renderedSnapshot) {\n            this._disposable = { dispose: (): void => {} };\n        }\n\n        const dataSubscriptions = [];\n\n        if (Array.isArray(renderedSnapshot)) {\n            renderedSnapshot.forEach((snapshot, idx) => {\n                dataSubscriptions.push(\n                    environment.subscribe(snapshot, (latestSnapshot) => {\n                        this._result.snapshot[idx] = latestSnapshot;\n                        this._result.data[idx] = latestSnapshot.data;\n                        this.refreshHooks();\n                    }),\n                );\n            });\n        } else {\n            dataSubscriptions.push(\n                environment.subscribe(renderedSnapshot, (latestSnapshot) => {\n                    this._result = getFragmentResult(latestSnapshot);\n                    this.refreshHooks();\n                }),\n            );\n        }\n\n        this._disposable = {\n            dispose: (): void => {\n                dataSubscriptions.map((s) => s.dispose());\n            },\n        };\n    }\n\n    changeVariables(variables, request): void {\n        if (this._selector.kind === 'PluralReaderSelector') {\n            (this._selector as any).selectors = (this\n                ._selector as PluralReaderSelector).selectors.map((s) =>\n                getNewSelector(request, s, variables),\n            );\n        } else {\n            this._selector = getNewSelector(request, this._selector, variables);\n        }\n        this.lookup();\n    }\n\n    lookupInStore(environment: IEnvironment, operation, fetchPolicy): Snapshot | null {\n        if (isStorePolicy(fetchPolicy)) {\n            const check: any = environment.check(operation);\n            if (check === 'available' || check.status === 'available') {\n                this._retainCachedOperation(operation);\n                return environment.lookup(operation.fragment);\n            }\n        }\n        return null;\n    }\n\n    refetch = (\n        taggedNode: GraphQLTaggedNode,\n        refetchVariables: Variables | ((fragmentVariables: Variables) => Variables),\n        renderVariables: Variables,\n        observerOrCallback: ObserverOrCallback,\n        options: RefetchOptions,\n    ): Disposable => {\n        //TODO Function\n        const fragmentVariables = this.getFragmentVariables();\n        const fetchVariables =\n            typeof refetchVariables === 'function'\n                ? refetchVariables(fragmentVariables)\n                : refetchVariables;\n        const newFragmentVariables = renderVariables\n            ? { ...fetchVariables, ...renderVariables }\n            : fetchVariables;\n\n        /*eslint-disable */\n        const observer =\n            typeof observerOrCallback === 'function'\n                ? {\n                      next: observerOrCallback,\n                      error: observerOrCallback,\n                  }\n                : observerOrCallback || ({} as any);\n\n        /*eslint-enable */\n        const onNext = (operation, payload, complete): void => {\n            this.changeVariables(newFragmentVariables, operation.request.node);\n            this.refreshHooks();\n            complete();\n        };\n\n        return this.executeFetcher(taggedNode, fetchVariables, options, observer, onNext);\n    };\n\n    // pagination\n\n    isLoading = (): boolean => {\n        return !!this._refetchSubscription;\n    };\n\n    hasMore = (connectionConfig?: ConnectionConfig): boolean => {\n        this.paginationData = getPaginationData(this.paginationData, this._fragment);\n        const connectionData = _getConnectionData(\n            this.paginationData,\n            this.getData(),\n            connectionConfig,\n        );\n        return !!(connectionData && connectionData.hasMore && connectionData.cursor);\n    };\n\n    refetchConnection = (\n        connectionConfig: ConnectionConfig,\n        totalCount: number,\n        observerOrCallback?: ObserverOrCallback,\n        refetchVariables?: Variables,\n    ): Disposable => {\n        this.paginationData = getPaginationData(this.paginationData, this._fragment);\n\n        this._refetchVariables = refetchVariables;\n        const paginatingVariables = {\n            count: totalCount,\n            cursor: null,\n            totalCount,\n        };\n        return this._fetchPage(\n            connectionConfig,\n            paginatingVariables,\n            toObserver(observerOrCallback),\n            { force: true },\n        );\n    };\n\n    loadMore = (\n        connectionConfig: ConnectionConfig,\n        pageSize: number,\n        observerOrCallback?: ObserverOrCallback,\n        options?: RefetchOptions,\n    ): Disposable => {\n        this.paginationData = getPaginationData(this.paginationData, this._fragment);\n\n        const observer = toObserver(observerOrCallback);\n        const connectionData = _getConnectionData(\n            this.paginationData,\n            this.getData(),\n            connectionConfig,\n        );\n\n        if (!connectionData) {\n            Observable.create((sink) => sink.complete()).subscribe(observer);\n            return null;\n        }\n        const totalCount = connectionData.edgeCount + pageSize;\n        if (options && options.force) {\n            return this.refetchConnection(\n                connectionConfig,\n                totalCount,\n                observerOrCallback,\n                undefined,\n            );\n        }\n        //const { END_CURSOR, START_CURSOR } = ConnectionInterface.get();\n        const cursor = connectionData.cursor;\n        /*warning(\n            cursor,\n            'ReactRelayPaginationContainer: Cannot `loadMore` without valid `%s` (got `%s`)',\n            this._direction === FORWARD ? END_CURSOR : START_CURSOR,\n            cursor,\n        );*/\n        const paginatingVariables = {\n            count: pageSize,\n            cursor: cursor,\n            totalCount,\n        };\n        return this._fetchPage(connectionConfig, paginatingVariables, observer, options);\n    };\n\n    _fetchPage(\n        connectionConfig: ConnectionConfig,\n        paginatingVariables: {\n            count: number;\n            cursor: string;\n            totalCount: number;\n        },\n        observer: Observer<void>,\n        options: RefetchOptions,\n    ): Disposable {\n        //const { componentRef: _, __relayContext, ...restProps } = this.props;\n        //const resolver = prevResult.resolver;\n        //const fragments = prevResult.resolver._fragments;\n        const rootVariables = getRootVariablesForSelector(this._selector);\n        // hack 6.0.0\n        let fragmentVariables = {\n            ...rootVariables,\n            ...this.getFragmentVariables(),\n            ...this._refetchVariables,\n        };\n        let fetchVariables = connectionConfig.getVariables(\n            this.getData(),\n            {\n                count: paginatingVariables.count,\n                cursor: paginatingVariables.cursor,\n            },\n            fragmentVariables,\n        );\n        invariant(\n            typeof fetchVariables === 'object' && fetchVariables !== null,\n            'ReactRelayPaginationContainer: Expected `getVariables()` to ' +\n                'return an object, got `%s` in `%s`.',\n            fetchVariables,\n            'useFragment pagination',\n        );\n        fetchVariables = {\n            ...fetchVariables,\n            ...this._refetchVariables,\n        };\n        fragmentVariables = {\n            ...fetchVariables,\n            ...fragmentVariables,\n        };\n\n        const onNext = (operation, payload, complete): void => {\n            const prevData = this.getData();\n\n            const getFragmentVariables =\n                connectionConfig.getFragmentVariables || this.paginationData.getFragmentVariables;\n            this.changeVariables(\n                getFragmentVariables(fragmentVariables, paginatingVariables.totalCount),\n                operation.request.node,\n            );\n\n            const nextData = this.getData();\n\n            // Workaround slightly different handling for connection in different\n            // core implementations:\n            // - Classic core requires the count to be explicitly incremented\n            // - Modern core automatically appends new items, updating the count\n            //   isn't required to see new data.\n            //\n            // `setState` is only required if changing the variables would change the\n            // resolved data.\n            // TODO #14894725: remove PaginationContainer equal check\n\n            if (!areEqual(prevData, nextData)) {\n                this.refreshHooks();\n                const callComplete = async (): Promise<void> => {\n                    complete();\n                };\n                callComplete();\n            } else {\n                complete();\n            }\n        };\n\n        return this.executeFetcher(\n            connectionConfig.query,\n            fetchVariables,\n            options,\n            observer,\n            onNext,\n        );\n    }\n\n    executeFetcher(\n        taggedNode: GraphQLTaggedNode,\n        fetchVariables: Variables,\n        options: RefetchOptions,\n        observerOrCallback: ObserverOrCallback,\n        onNext: (operation, payload, complete) => void,\n    ): Disposable {\n        const cacheConfig: CacheConfig = options ? { force: !!options.force } : undefined;\n        if (cacheConfig != null && options && options.metadata != null) {\n            cacheConfig.metadata = options.metadata;\n        }\n\n        /*eslint-disable */\n        const observer =\n            typeof observerOrCallback === 'function'\n                ? {\n                      next: observerOrCallback,\n                      error: observerOrCallback,\n                  }\n                : observerOrCallback || ({} as any);\n\n        /*eslint-enable */\n\n        const operation = createOperation(taggedNode, fetchVariables);\n\n        const optionsFetch = options ? options : {};\n\n        const { fetchPolicy = 'network-only' } = optionsFetch;\n\n        const storeSnapshot = this.lookupInStore(this._environment, operation, fetchPolicy);\n        if (storeSnapshot != null) {\n            onNext(operation, null, () => {\n                observer.next && observer.next();\n                observer.complete && observer.complete();\n            });\n        }\n        // Cancel any previously running refetch.\n        this._refetchSubscription && this._refetchSubscription.unsubscribe();\n\n        // Declare refetchSubscription before assigning it in .start(), since\n        // synchronous completion may call callbacks .subscribe() returns.\n        let refetchSubscription: Subscription;\n\n        const isNetwork = isNetworkPolicy(fetchPolicy, storeSnapshot);\n        if (!isNetwork) {\n            return {\n                dispose: (): void => {},\n            };\n        }\n        if (isNetwork) {\n            const reference = this._environment.retain(operation);\n\n            /*eslint-disable */\n            const fetchQueryOptions =\n                cacheConfig != null\n                    ? {\n                          networkCacheConfig: cacheConfig,\n                      }\n                    : {};\n\n            /*eslint-enable */\n            const cleanup = (): void => {\n                this._selectionReferences = this._selectionReferences.concat(reference);\n                if (this._refetchSubscription === refetchSubscription) {\n                    this._refetchSubscription = null;\n                    this._isARequestInFlight = false;\n                }\n            };\n\n            this._isARequestInFlight = true;\n            fetchQuery(this._environment, operation, fetchQueryOptions)\n                .mergeMap((payload) => {\n                    return Observable.create((sink) => {\n                        onNext(operation, payload, () => {\n                            sink.next(undefined); // pass void to public observer's `next()`\n                            sink.complete();\n                        });\n                    });\n                })\n                // use do instead of finally so that observer's `complete` fires after cleanup\n                .do({\n                    error: cleanup,\n                    complete: cleanup,\n                    unsubscribe: cleanup,\n                })\n                .subscribe({\n                    ...observer,\n                    start: (subscription) => {\n                        refetchSubscription = subscription;\n                        this._refetchSubscription = this._isARequestInFlight\n                            ? refetchSubscription\n                            : null;\n                        observer.start && observer.start(subscription);\n                    },\n                });\n        }\n\n        return {\n            dispose: (): void => {\n                refetchSubscription && refetchSubscription.unsubscribe();\n            },\n        };\n    }\n}\n","import { useEffect, useState, useRef } from 'react';\nimport { GraphQLTaggedNode } from 'relay-runtime';\nimport { FragmentResolver } from './FragmentResolver';\nimport {\n    ContainerResult,\n    KeyType,\n    KeyReturnType,\n    $Call,\n    ArrayKeyType,\n    ArrayKeyReturnType,\n} from './RelayHooksType';\nimport { useRelayEnvironment } from './useRelayEnvironment';\n\nexport function useOssFragment<TKey extends KeyType>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey,\n): [$Call<KeyReturnType<TKey>>, FragmentResolver];\nexport function useOssFragment<TKey extends KeyType>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey | null,\n): [$Call<KeyReturnType<TKey>> | null, FragmentResolver];\nexport function useOssFragment<TKey extends ArrayKeyType>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey,\n): [ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>>, FragmentResolver];\nexport function useOssFragment<TKey extends ArrayKeyType>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey | null,\n): [ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>> | null, FragmentResolver] {\n    const environment = useRelayEnvironment();\n    const [, forceUpdate] = useState<ContainerResult>(null);\n    const ref = useRef<{ resolver: FragmentResolver }>(null);\n    if (ref.current === null || ref.current === undefined) {\n        ref.current = {\n            resolver: new FragmentResolver(forceUpdate),\n        };\n    }\n\n    const { resolver } = ref.current;\n\n    useEffect(() => {\n        return (): void => {\n            resolver.dispose();\n        };\n    }, [resolver]);\n\n    resolver.resolve(environment, fragmentNode, fragmentRef);\n\n    const data = resolver.getData();\n\n    return [data, resolver];\n}\n","import { GraphQLTaggedNode } from 'relay-runtime';\nimport { KeyType, KeyReturnType, $Call, ArrayKeyType, ArrayKeyReturnType } from './RelayHooksType';\nimport { useOssFragment } from './useOssFragment';\n\nexport function useFragment<TKey extends KeyType>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey,\n): $Call<KeyReturnType<TKey>>;\nexport function useFragment<TKey extends KeyType>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey | null,\n): $Call<KeyReturnType<TKey>> | null;\nexport function useFragment<TKey extends ArrayKeyType>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey,\n): ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>>;\nexport function useFragment<TKey extends ArrayKeyType>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey | null,\n): ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>> {\n    const [data] = useOssFragment(fragmentNode, fragmentRef);\n\n    return data;\n}\n","/*eslint-disable */\nimport * as invariant from 'fbjs/lib/invariant';\nimport * as React from 'react';\nimport { Environment, MutationParameters, commitMutation } from 'relay-runtime';\nimport useMounted from '@restart/hooks/useMounted';\nimport {\n    MutationNode,\n    MutationConfig,\n    MutationState,\n    Mutate,\n    MutationProps,\n} from './RelayHooksType';\nimport { useRelayEnvironment } from './useRelayEnvironment';\nconst { useCallback, useState } = React;\n\nexport function useMutation<T extends MutationParameters>(\n    mutation: MutationNode<T>,\n    userConfig: MutationConfig<T> = {},\n    /** if not provided, the context environment will be used. */\n    environment?: Environment,\n): [Mutate<T>, MutationState<T>] {\n    const [state, setState] = useState<MutationState<T>>({\n        loading: false,\n        data: null,\n        error: null,\n    });\n\n    const isMounted = useMounted();\n\n    const relayEnvironment = useRelayEnvironment();\n    const resolvedEnvironment = environment || relayEnvironment;\n    const {\n        configs,\n        variables,\n        uploadables,\n        onCompleted,\n        onError,\n        optimisticUpdater,\n        optimisticResponse,\n        updater,\n    } = userConfig;\n\n    const mutate: Mutate<T> = useCallback(\n        (config) => {\n            const mergedConfig = {\n                configs,\n                variables,\n                uploadables,\n                onCompleted,\n                onError,\n                optimisticUpdater,\n                optimisticResponse,\n                updater,\n                ...config,\n            };\n\n            invariant(mergedConfig.variables, 'you must specify variables');\n\n            setState({\n                loading: true,\n                data: null,\n                error: null,\n            });\n\n            return new Promise((resolve, reject) => {\n                function handleError(error: any): void {\n                    if (isMounted()) {\n                        setState({\n                            loading: false,\n                            data: null,\n                            error,\n                        });\n                    }\n\n                    if (mergedConfig.onError) {\n                        mergedConfig.onError(error);\n                        resolve();\n                    } else {\n                        reject(error);\n                    }\n                }\n\n                commitMutation(resolvedEnvironment, {\n                    ...mergedConfig,\n                    mutation,\n                    variables: mergedConfig.variables!,\n                    onCompleted: (response, errors) => {\n                        if (errors) {\n                            // FIXME: This isn't right. onError expects a single error.\n                            handleError(errors);\n                            return;\n                        }\n\n                        if (isMounted()) {\n                            setState({\n                                loading: false,\n                                data: response,\n                                error: null,\n                            });\n                        }\n\n                        if (mergedConfig.onCompleted) {\n                            mergedConfig.onCompleted(response);\n                        }\n                        resolve(response);\n                    },\n                    onError: handleError,\n                });\n            });\n        },\n        [\n            resolvedEnvironment,\n            configs,\n            mutation,\n            variables,\n            uploadables,\n            onCompleted,\n            onError,\n            optimisticUpdater,\n            optimisticResponse,\n            updater,\n            isMounted,\n        ],\n    );\n\n    return [mutate, state];\n}\n\nexport function Mutation<T extends MutationParameters>({\n    children,\n    mutation,\n    environment,\n    ...config\n}: MutationProps<T>) {\n    const [mutate, state] = useMutation(mutation, config, environment);\n    return children(mutate, state) as React.ReactElement;\n}\n","import { useEffect } from 'react';\nimport { GraphQLSubscriptionConfig, requestSubscription, OperationType } from 'relay-runtime';\nimport { useRelayEnvironment } from './useRelayEnvironment';\n\nexport function useSubscription<TSubscriptionPayload extends OperationType = OperationType>(\n    config: GraphQLSubscriptionConfig<TSubscriptionPayload>,\n): void {\n    const environment = useRelayEnvironment();\n\n    useEffect(() => {\n        const { dispose } = requestSubscription(environment, config);\n        return dispose;\n    }, [environment, config]);\n}\n","import { useMemo } from 'react';\nimport { GraphQLTaggedNode, OperationType } from 'relay-runtime';\nimport {\n    PaginationFunction,\n    KeyType,\n    KeyReturnType,\n    $Call,\n    ArrayKeyType,\n    ArrayKeyReturnType,\n} from './RelayHooksType';\nimport { useOssFragment } from './useOssFragment';\n\nexport function usePagination<\n    TKey extends KeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey,\n): [\n    $Call<KeyReturnType<TKey>>,\n    PaginationFunction<$Call<KeyReturnType<TKey>>, TOperationType['variables']>,\n];\nexport function usePagination<\n    TKey extends KeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey | null,\n): [\n    $Call<KeyReturnType<TKey>> | null,\n    PaginationFunction<$Call<KeyReturnType<TKey>> | null, TOperationType['variables']>,\n];\nexport function usePagination<\n    TKey extends ArrayKeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey,\n): [\n    ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>>,\n    PaginationFunction<ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>>, TOperationType['variables']>,\n];\nexport function usePagination<\n    TKey extends ArrayKeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey | null,\n): [\n    ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>> | null,\n    PaginationFunction<\n        ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>> | null,\n        TOperationType['variables']\n    >,\n] {\n    const [data, resolver] = useOssFragment(fragmentNode, fragmentRef);\n\n    const fns = useMemo(() => {\n        return {\n            loadMore: resolver.loadMore,\n            hasMore: resolver.hasMore,\n            isLoading: resolver.isLoading,\n            refetchConnection: resolver.refetchConnection,\n        };\n    }, [resolver]);\n\n    return [data, fns];\n}\n","import { GraphQLTaggedNode, OperationType } from 'relay-runtime';\nimport {\n    RefetchFunction,\n    KeyType,\n    KeyReturnType,\n    $Call,\n    ArrayKeyType,\n    ArrayKeyReturnType,\n} from './RelayHooksType';\nimport { useOssFragment } from './useOssFragment';\n\nexport function useRefetch<\n    TKey extends KeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey,\n): [$Call<KeyReturnType<TKey>>, RefetchFunction<TOperationType['variables']>];\nexport function useRefetch<\n    TKey extends KeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey | null,\n): [$Call<KeyReturnType<TKey>> | null, RefetchFunction<TOperationType['variables']>];\nexport function useRefetch<\n    TKey extends ArrayKeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey,\n): [ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>>, RefetchFunction<TOperationType['variables']>];\nexport function useRefetch<\n    TKey extends ArrayKeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentNode: GraphQLTaggedNode,\n    fragmentRef: TKey | null,\n): [\n    ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>> | null,\n    RefetchFunction<TOperationType['variables']>,\n] {\n    const [data, { refetch }] = useOssFragment(fragmentNode, fragmentRef);\n\n    return [data, refetch];\n}\n","import * as invariant from 'fbjs/lib/invariant';\nimport { useCallback, useMemo } from 'react';\nimport { GraphQLTaggedNode, getFragment, OperationType, ConcreteRequest } from 'relay-runtime';\nimport {\n    RefetchableFunction,\n    RefetchOptions,\n    KeyType,\n    KeyReturnType,\n    $Call,\n    ArrayKeyType,\n    ArrayKeyReturnType,\n    ObserverOrCallback,\n} from './RelayHooksType';\nimport { useRefetch } from './useRefetch';\n\nexport function useRefetchable<\n    TKey extends KeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentInput: GraphQLTaggedNode,\n    fragmentRef: TKey,\n): [$Call<KeyReturnType<TKey>>, RefetchableFunction<TOperationType['variables']>];\nexport function useRefetchable<\n    TKey extends KeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentInput: GraphQLTaggedNode,\n    fragmentRef: TKey | null,\n): [$Call<KeyReturnType<TKey>> | null, RefetchableFunction<TOperationType['variables']>];\nexport function useRefetchable<\n    TKey extends ArrayKeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentInput: GraphQLTaggedNode,\n    fragmentRef: TKey,\n): [\n    ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>>,\n    RefetchableFunction<TOperationType['variables']>,\n];\nexport function useRefetchable<\n    TKey extends ArrayKeyType,\n    TOperationType extends OperationType = OperationType\n>(\n    fragmentInput: GraphQLTaggedNode,\n    fragmentRef: TKey | null,\n): [\n    ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>> | null,\n    RefetchableFunction<TOperationType['variables']>,\n] {\n    const [data, refetch] = useRefetch(fragmentInput, fragmentRef);\n\n    const refetchNode = useMemo(() => {\n        const fragmentNode = getFragment(fragmentInput);\n        const metadata = fragmentNode.metadata;\n        invariant(\n            metadata != null,\n            'useRefetchable: Expected fragment `%s` to be refetchable when using `%s`. ' +\n                'Did you forget to add a @refetchable directive to the fragment?',\n            'useRefetchable',\n            fragmentNode.name,\n        );\n        const isPlural = metadata.plural;\n        invariant(\n            isPlural !== true,\n            'useRefetchable: Expected fragment `%s` not to be plural when using ' +\n                '`%s`. Remove `@relay(plural: true)` from fragment `%s` ' +\n                'in order to use it with `%s`.',\n            fragmentNode.name,\n            'useRefetchable',\n            fragmentNode.name,\n            'useRefetchable',\n        );\n\n        const refetchMetadata = metadata.refetch;\n        invariant(\n            refetchMetadata != null,\n            'useRefetchable: Expected fragment `%s` to be refetchable when using `%s`. ' +\n                'Did you forget to add a @refetchable directive to the fragment?',\n            'useRefetchable',\n            fragmentNode.name,\n        );\n\n        // handle both commonjs and es modules\n        const refetchableRequest: ConcreteRequest = (refetchMetadata as any).operation.default\n            ? (refetchMetadata as any).operation.default\n            : refetchMetadata.operation;\n\n        return refetchableRequest;\n    }, [fragmentInput]);\n\n    const refetchable = useCallback(\n        (\n            refetchVariables:\n                | TOperationType['variables']\n                | ((fragmentVariables: TOperationType['variables']) => TOperationType['variables']),\n            options: {\n                renderVariables?: TOperationType['variables'];\n                observerOrCallback?: ObserverOrCallback;\n                refetchOptions?: RefetchOptions;\n            } = {},\n        ) => {\n            return refetch(\n                refetchNode,\n                refetchVariables,\n                options.renderVariables,\n                options.observerOrCallback,\n                options.refetchOptions,\n            );\n        },\n        [refetch, refetchNode],\n    );\n\n    return [data, refetchable];\n}\n","import * as React from 'react';\nimport { Environment } from 'relay-runtime';\nimport { ReactRelayContext } from './ReactRelayContext'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport const RelayEnvironmentProvider = function<\n    TEnvironment extends Environment = Environment\n>(props: { children: React.ReactNode; environment: TEnvironment }): JSX.Element {\n    const context = React.useMemo(() => ({ environment: props.environment }), [props.environment]);\n    return (\n        <ReactRelayContext.Provider value={context}>{props.children}</ReactRelayContext.Provider>\n    );\n};\n"],"names":["React","createOperationDescriptor","getRequest","createRequestDescriptor","createReaderSelector","useRef","useEffect","useMemo","isPromise","fetchQuery","Observable","getVariablesFromFragment","getDataIDsFromFragment","getFragment","getSelector","commitMutation","useCallback"],"mappings":"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"}